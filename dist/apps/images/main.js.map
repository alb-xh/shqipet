{"version":3,"file":"main.js","mappings":";;;;;;;AAAA;;;;;;ACAA;;;;;;ACAA;;;;;;;;;;ACAA,wCAAwC;AACxC,wCAA8C;AAE9C,gDAAiD;AACjD,6CAA2C;AAE3C,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,KAAK,YAAY,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,UAAU,CAAC;AAOtF,IAAM,SAAS,GAAf,MAAM,SAAS;CAAG;AAAZ,SAAS;IALrB,mBAAM,EAAC;QACN,OAAO,EAAE,CAAC,qBAAY,CAAC,OAAO,CAAC,EAAE,WAAW,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,EAAE;QACjE,WAAW,EAAE,CAAC,8BAAa,CAAC;QAC5B,SAAS,EAAE,CAAC,wBAAU,CAAC;KACxB,CAAC;GACW,SAAS,CAAG;AAAZ,8BAAS;;;;;;;ACbtB;;;;;;;;;;;ACAA,wCAAiD;AAEjD,6CAA2C;AAGpC,IAAM,aAAa,GAAnB,MAAM,aAAa;IACxB,YAA6B,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAG,CAAC;IAGvD,OAAO;QACL,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;IACnC,CAAC;CACF;AAJC;IAAC,gBAAG,GAAE;;;;4CAGL;AANU,aAAa;IADzB,uBAAU,GAAE;iEAE8B,wBAAU,oBAAV,wBAAU;GADxC,aAAa,CAOzB;AAPY,sCAAa;;;;;;;;;;;ACL1B,wCAA4C;AAGrC,IAAM,UAAU,GAAhB,MAAM,UAAU;IACrB,OAAO;QACL,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC;IAClC,CAAC;CACF;AAJY,UAAU;IADtB,uBAAU,GAAE;GACA,UAAU,CAItB;AAJY,gCAAU;;;;;;UCHvB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;ACtBA;;;GAGG;;;AAEH,wCAAwD;AACxD,sCAA2C;AAE3C,4CAA6C;AAC7C,wCAA+C;AAE/C,SAAe,SAAS;;QACtB,MAAM,GAAG,GAAG,MAAM,kBAAW,CAAC,MAAM,CAAC,sBAAS,CAAC,CAAC;QAEhD,MAAM,IAAI,GAAG,IAAI,CAAC;QAClB,MAAM,MAAM,GAAG,QAAQ,CAAC;QAExB,MAAM,aAAa,GAAG,GAAG,CAAC,GAAG,CAAC,sBAAa,CAAC,CAAC;QAC7C,MAAM,MAAM,GAAG,aAAa,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAElD,GAAG,CAAC,UAAU,CAAC,EAAE,MAAM,EAAE,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAC/C,GAAG,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAC5B,GAAG,CAAC,cAAc,CAAC,IAAI,uBAAc,EAAE,CAAC;QAExC,MAAM,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAEvB,eAAM,CAAC,GAAG,CAAC,kDAAkD,IAAI,IAAI,MAAM,EAAE,CAAC,CAAC;IACjF,CAAC;CAAA;AAED,SAAS,EAAE,CAAC","sources":["webpack:///external commonjs \"tslib\"","webpack:///external commonjs \"@nestjs/common\"","webpack:///external commonjs \"@nestjs/core\"","webpack:///./src/app/app.module.ts","webpack:///external commonjs \"@nestjs/config\"","webpack:///./src/app/app.controller.ts","webpack:///./src/app/app.service.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["module.exports = require(\"tslib\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\nconst envFilePath = process.env['NODE' + '_ENV'] === 'production' ? '.prod.env' : '.dev.env';\n\n@Module({\n  imports: [ConfigModule.forRoot({ envFilePath, isGlobal: true }),],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n","module.exports = require(\"@nestjs/config\");","import { Controller, Get } from '@nestjs/common';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getData() {\n    return this.appService.getData();\n  }\n}\n","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getData(): { message: string } {\n    return { message: 'Hello API' };\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger, ValidationPipe } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app/app.module';\nimport { ConfigService } from '@nestjs/config';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n  const port = 4000;\n  const prefix = 'images';\n\n  const configService = app.get(ConfigService);\n  const origin = configService.getOrThrow('DOMAIN');\n\n  app.enableCors({ origin: new RegExp(origin) });\n  app.setGlobalPrefix(prefix);\n  app.useGlobalPipes(new ValidationPipe())\n\n  await app.listen(port);\n\n  Logger.log(`ðŸš€ Application is running on: http://localhost:${port}/${prefix}`);\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}