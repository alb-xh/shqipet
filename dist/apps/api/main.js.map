{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///external commonjs \"tslib\"","webpack:///external commonjs \"cookie-parser\"","webpack:///external commonjs \"@nestjs/common\"","webpack:///external commonjs \"@nestjs/core\"","webpack:///./src/app/app.module.ts","webpack:///../../libs/config/src/index.ts","webpack:///../../libs/config/src/lib/config.module.ts","webpack:///external commonjs \"@nestjs/config\"","webpack:///../../libs/db/src/index.ts","webpack:///../../libs/db/src/lib/db.module.ts","webpack:///external commonjs \"@nestjs/typeorm\"","webpack:///../../libs/db/src/lib/entities/index.ts","webpack:///../../libs/db/src/lib/entities/user.entity.ts","webpack:///external commonjs \"typeorm\"","webpack:///./src/app/controllers/index.ts","webpack:///./src/app/controllers/users.controller.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["module.exports = require(\"tslib\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@shqipet/config';\nimport { DbModule, User } from '@shqipet/db';\nimport { UsersController } from './controllers';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    ConfigModule,\n    DbModule,\n  ],\n  controllers: [\n    UsersController,\n  ],\n})\nexport class AppModule {}\n","export * from './lib/config.module';\n","import { Module } from '@nestjs/common';\nimport { ConfigService, ConfigModule as NestConfigModule } from '@nestjs/config';\n\nconst envFilePath = process.env['NODE' + '_ENV'] === 'production' ? '.prod.env' : '.dev.env';\n\n@Module({\n  imports: [ NestConfigModule.forRoot({ isGlobal: true, envFilePath  }) ],\n  providers: [ConfigService],\n  exports: [ConfigService],\n})\nexport class ConfigModule {}\n","module.exports = require(\"@nestjs/config\");","export * from './lib/db.module';\nexport * from './lib/entities';\n","import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@shqipet/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigService } from '@nestjs/config';\n\nimport * as entitiesObj from './entities';\n\nconst entities = Object.values(entitiesObj)\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ ConfigModule ],\n      useFactory: (configService: ConfigService) => ({\n        type: configService.getOrThrow<any>('DB_TYPE'),\n        host: configService.getOrThrow<string>('DB_HOST'),\n        port: configService.getOrThrow<number>('DB_PORT'),\n        username: configService.getOrThrow<string>('DB_USERNAME'),\n        password: configService.getOrThrow<string>('DB_PASSWORD'),\n        database: configService.getOrThrow<string>('DB_DATABASE'),\n        entities,\n        synchronize: false,\n      }),\n      inject: [ ConfigService ],\n    }),\n    TypeOrmModule.forFeature(entities),\n  ],\n  exports: [ TypeOrmModule ]\n})\nexport class DbModule {}\n","module.exports = require(\"@nestjs/typeorm\");","export * from './user.entity';","import { Column, CreateDateColumn, Entity, Index, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true, length: 32 })\n  @Index({ unique: true })\n  username: string;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column({ nullable: true })\n  profilePictureUrl?: string;\n\n  @Column({ length: 150, nullable: true })\n  bio?: string;\n\n  @Column()\n  password: string;\n\n  @Column()\n  resetPasswordCode: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updateAt: Date;\n}","module.exports = require(\"typeorm\");","export * from './users.controller';\n","import { Controller, Get, NotFoundException, Param } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { GetUserByUsernameResponse } from '@shqipet/common';\nimport { User } from \"@shqipet/db\";\nimport { Repository } from \"typeorm\";\n\n\n@Controller('users')\nexport class UsersController {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository<User>,\n  ) {}\n\n  @Get(':username')\n  async getUserByUsername(@Param('username') username: string): Promise<GetUserByUsernameResponse> {\n    const user = await this.userRepository.findOneBy({ username });\n    if (!user) {\n      throw new NotFoundException();\n    }\n\n    return {\n      id: user.id,\n      username: user.username,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      profilePictureUrl: user.profilePictureUrl,\n      bio: user.bio,\n    }\n  }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\nimport cookieParser from 'cookie-parser';\n\nimport { Logger, ValidationPipe } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app/app.module';\nimport { ConfigService } from '@nestjs/config';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n  const configService = app.get(ConfigService);\n  const port = configService.getOrThrow('PORT');\n  const prefix = configService.getOrThrow('PREFIX');\n  const origin = configService.getOrThrow('DOMAIN');\n\n  app.enableCors({ credentials: true, origin: new RegExp(origin) });\n  app.use(cookieParser());\n  app.setGlobalPrefix(prefix);\n  app.useGlobalPipes(new ValidationPipe())\n\n  await app.listen(port);\n\n  Logger.log(`🚀 Application is running on: http://localhost:${port}/${prefix}`);\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}